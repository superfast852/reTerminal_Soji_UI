# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# TODO: Figure out how to remove plot from window or alternative to MPL, Implement Other Tabs, Tinker with ttk
from matplotlib import pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from pathlib import Path
import tk_tools
from sys import exit
import cv2
import fast_ocv
from PIL import Image as Img, ImageTk
from os import system as cmd
import atexit

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk, Label, Frame


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


tab = 0
asdf = 0
y = []  # The list for plotting objects. I assume we want time to be the x axis
plot_lim = 100  # yeah.
cud = None  # Current updater, switches the function that updates the current window.
plt_fig: FigureCanvasTkAgg = None
ax: plt.Axes = None
current_after = None
page = {2: {},
        3: {},
        4: {},
        5: {},
        6: {}}

# Building Blocks
window = Tk()
window.attributes("-fullscreen", True)
cap = fast_ocv.WebcamVideoStream(src=0).start()

window.geometry("1280x720")
window.configure(bg="#2E2E2E")


def setup_plot_box(sx, sy, px, py):
    global plt_fig, ax

    fig = Figure(figsize=(sx / 100, sy / 100), dpi=100)
    ax = fig.add_subplot(111)
    plt_fig = FigureCanvasTkAgg(fig, master=window)
    tkplt = plt_fig.get_tk_widget()
    tkplt.place(x=px, y=py)


def plot_box_1(xs, ys, kill=0):  # yeah that was actually so fucking easy.
    global plt_fig, ax
    if kill:
        plt_fig.get_tk_widget().destroy()
        plt.close(plt_fig.figure)
    else:
        ax.cla()
        ax.plot(xs, ys)
    plt_fig.draw()


def button_1():  # The exit button. Simple.
    exit_handler()


def button_2():  # Settings button
    global tab, cud
    if tab == 2:
        return
    tab = 2
    comps = page[2]
    switch_frames(2)
    # Code goes here
    print("B2 ACTIVE")
    if cud == b2_updater:
        pass
    else:
        cud() if cud is not None else None
        cud = b2_updater
        cud()


def b2_updater():  # Settings button
    global current_after
    if tab == 2:
        current_after = window.after(1, b2_updater)
    else:
        window.after_cancel(current_after) if current_after is not None else None
        print("Closed B2 Successfully")


def button_3():  # Camera feed
    global tab, cud
    if tab == 3:
        return
    tab = 3
    page_elements = page[3]
    switch_frames(3)
    page_elements["label"] = Label(window)
    page_elements["label"].place(x=96, y=96)
    print("B3 ACTIVE")
    if cud == b3_updater:
        pass
    else:
        cud() if cud is not None else None
        cud = b3_updater
        cud()


def b3_updater():  # Yeah, camera feed
    global current_after
    label = page[3]["label"]
    if tab == 3:
        frame = cv2.cvtColor(cap.read(), cv2.COLOR_BGR2RGB)
        img = ImageTk.PhotoImage(Img.fromarray(frame))
        label.imgtk = img
        label.configure(image=img)
        current_after = window.after(1, b3_updater)
    else:
        label.place_forget()
        window.after_cancel(current_after) if current_after is not None else None
        print("Closed B3 Successfully")


def button_4():  # Terminal window
    global tab, cud
    if tab == 4:
        return
    tab = 4
    comps = page[4]
    switch_frames(4)
    # Code goes here
    try:
        comps["terminal"]
    except KeyError:
        comps["terminal"] = Frame(window, width=1280-96, height=720-96, bg="#2E2E2E")
        comps["terminal"].place(x=96, y=96)
        cmd(f"xterm -into {comps['terminal'].winfo_id()} -geometry 1280x720 -sb &")
    print("B4 ACTIVE")
    if cud == b4_updater:
        pass
    else:
        cud() if cud is not None else None
        cud = b4_updater
        cud()


def b4_updater():  # Terminal window
    global current_after
    if tab == 4:
        current_after = window.after(1, b4_updater)
    else:
        window.after_cancel(current_after) if current_after is not None else None
        page[4]["terminal"].place_forget()
        page[4].pop("terminal")
        print("Closed B4 Successfully")


def button_5():  # Telemetry window setup.
    global tab, cud
    if tab == 5:
        return
    tab = 5
    comps = page[5]
    switch_frames(5)
    comps["box_pos"] = [(185, 177, 481, 387), (540, 174, 836, 384), (895, 174, 1191, 384),
                        (186, 448, 482, 658), (541, 445, 837, 655), (896, 445, 1192, 655)]

    # Bars
    comps["p1"] = ttk.Progressbar(window, maximum=100, length=200, value=0, orient='horizontal', mode='determinate')
    comps["p2"] = ttk.Progressbar(window, maximum=100, length=200, value=0, orient='horizontal', mode='determinate')
    comps["p1"].place(x=(comps["box_pos"][1][0] + 148) - 100, y=(comps["box_pos"][1][1] + 105))
    comps["p2"].place(x=(comps["box_pos"][1][0] + 148) - 100, y=(comps["box_pos"][1][1] + 175))

    # Rectangles / Base
    # Widget Rectangles

    canvas.create_rectangle(185.0, 177.0, 481.0, 387.0, fill="#6700CD", outline="")
    canvas.create_text(245.0, 223.0, anchor="nw", text="Pi stats:\nIP, cpu usage, whatever", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(540.0, 174.0, 836.0, 384.0, fill="#6700CD", outline="")
    canvas.create_text(600.0, 220.0, anchor="nw", text="Battery Monitor", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))
    canvas.create_text(600.0, 250.0, anchor="nw", text="Analytical Engine Bat", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))
    canvas.create_text(600.0, 320.0, anchor="nw", text="Battery Monitor", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(895.0, 174.0, 1191.0, 384.0, fill="#6700CD", outline="")
    canvas.create_text(948.0, 180.0, anchor="nw", text="Sensor monitor", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(186.0, 448.0, 482.0, 658.0, fill="#6700CD", outline="")
    canvas.create_text(246.0, 494.0, anchor="nw", text="Arm angles", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(541.0, 445.0, 837.0, 655.0, fill="#6700CD", outline="")
    canvas.create_text(601.0, 491.0, anchor="nw", text="idk some other stats", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(896.0, 445.0, 1192.0, 655.0, fill="#6700CD", outline="")
    canvas.create_text(949.0, 485.0, anchor="nw", text="Allen add important stats", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    box_pos = comps["box_pos"]
    setup_plot_box(250, 180, box_pos[2][0] + 25, box_pos[2][1] + 30)
    print("B5 ACTIVE")

    if cud == b5_updater:
        pass
    else:
        cud() if cud is not None else None
        cud = b5_updater
        cud()


def b5_updater():  # Telemetry window
    global tab, asdf, current_after, y
    p1 = page[5]["p1"]  # Progress bars thingies in the upper middle.
    p2 = page[5]["p2"]
    if tab == 5:
        # Set the value for the progress bars.
        p1['value'] = asdf
        p2['value'] = 100 - asdf
        y.append(asdf)  # The plotter thingie.
        if len(y) >= plot_lim:
            y.pop(0)
        asdf = (asdf+1) % 100  # Sawtooth loopback
        plot_box_1(range(len(y)), y)
        current_after = window.after(1, b5_updater)
    else:  # The closer.
        window.after_cancel(current_after) if current_after is not None else None
        plot_box_1(0, 0, 1)
        p1.destroy()
        p2.destroy()
        y = []
        print("Closed B5 Successfully")


def button_6():  # Home button
    global tab, cud
    if tab == 6:
        return
    tab = 6
    comps = page[6]
    switch_frames(6)
    # Code goes here

    canvas.create_rectangle(185.0, 177.0, 481.0, 387.0, fill="#6700CD", outline="")
    canvas.create_text(245.0, 220.0, anchor="nw", text="Connection Status", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(540.0, 174.0, 836.0, 384.0, fill="#6700CD", outline="")
    canvas.create_text(600.0, 220.0, anchor="nw", text="Battery Monitor", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(895.0, 174.0, 1191.0, 384.0, fill="#6700CD", outline="")
    canvas.create_text(948.0, 220.0, anchor="nw", text="Sensor monitor", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(186.0, 448.0, 482.0, 658.0, fill="#6700CD", outline="")
    canvas.create_text(246.0, 494.0, anchor="nw", text="Pi Coords", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(541.0, 445.0, 837.0, 655.0, fill="#6700CD", outline="")
    canvas.create_text(601.0, 494.0, anchor="nw", text="idk some other stats", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))

    canvas.create_rectangle(896.0, 445.0, 1192.0, 655.0, fill="#6700CD", outline="")
    canvas.create_text(949.0, 494.0, anchor="nw", text="Allen add important stats", fill="#000000",
                       font=("PalanquinDark Regular", 20 * -1))
    print("B6 ACTIVE")
    if cud == b6_updater:
        pass
    else:
        cud() if cud is not None else None
        cud = b6_updater
        cud()


def b6_updater():  # Home button
    global current_after
    if tab == 6:
        # Code goes here
        current_after = window.after(1, b6_updater)
    else:
        window.after_cancel(current_after) if current_after is not None else None
        print("Closed B6 Successfully")


def switch_frames(page_number):
    base.delete("all")
    # Borders
    base.create_rectangle(0.0, 0.0, 96.0, 720.0, fill="#6700CD", outline="")
    base.create_rectangle(0.0, 0.0, 1280.0, 96.0, fill="#6700CD", outline="")

    base.create_text(500.0, 40.0, anchor="center", text="Soji DNN Command Terminal", fill="#FFFFFF",
                     font=("PalanquinDark Regular", 40 * -1))

# ------------------------------------------BACKBONE------------------------------------------------------------------ #


base = Canvas(window, bg="#2E2E2E", height=720, width=1280, bd=0, highlightthickness=0, relief="ridge")
base.place(x=0, y=0)

# Buttons
button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
b1 = Button(image=button_image_1, borderwidth=0, highlightthickness=0, command=button_1, relief="flat")
b1.place(x=0.0, y=624.0, width=96.0, height=96.0)

button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
b2 = Button(image=button_image_2, borderwidth=0, highlightthickness=0, command=button_2, relief="flat")
b2.place(x=0.0, y=505.0, width=96.0, height=96.0)

button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
b3 = Button(image=button_image_3, borderwidth=0, highlightthickness=0, command=button_3, relief="flat")
b3.place(x=0.0, y=375.0, width=96.0, height=96.0)

button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
b4 = Button(image=button_image_4, borderwidth=0, highlightthickness=0, command=button_4, relief="flat")
b4.place(x=0.0, y=252.0, width=96.0, height=96.0)

button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))
b5 = Button(image=button_image_5, borderwidth=0, highlightthickness=0, command=button_5, relief="flat")
b5.place(x=0.0, y=126.0, width=96.0, height=96.0)


button_image_6 = PhotoImage(file=relative_to_assets("button_6.png"))
b6 = Button(image=button_image_6, borderwidth=0, highlightthickness=0, command=button_6, relief="flat")
b6.place(x=0.0, y=0.0, width=96.0, height=96.0)

# Borders
base.create_rectangle(0.0, 0.0, 96.0, 720.0, fill="#6700CD", outline="")

base.create_rectangle(0.0, 0.0, 1280.0, 96.0, fill="#6700CD", outline="")

base.create_text(500.0, 40.0, anchor="center", text="Soji DNN Command Terminal",fill="#FFFFFF", font=("PalanquinDark Regular", 40 * -1))

canvas = base
# ---------------------------------------TAB CODE--------------------------------------------------------------------- #


def exit_handler():
    global tab, current_after
    window.after_cancel(str(current_after)) if current_after is not None else None
    tab = 0
    window.destroy()
    window.quit()
    cap.stop()
    cmd("killall -9 xterm")
    exit(0)


button_6()
window.bind('<Control-c>', exit_handler)
window.resizable(False, False)
window.mainloop()